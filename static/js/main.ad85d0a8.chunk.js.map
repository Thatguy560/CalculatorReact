{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","handleClick","Input","style","overflow","input","ClearButton","handleClear","App","addToInput","setState","state","calculatePercentage","displayValue","parseFloat","fixedDigits","replace","newValue","String","toFixed","length","Calculate","math","e","this","slice","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad85d0a8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nconst isOperator = (val) => {\n  return (\n    !isNaN(val) ||\n    val === \".\" ||\n    val === \"=\" ||\n    val === \"÷\" ||\n    val === \"×\" ||\n    val === \"+\" ||\n    val === \"-\" ||\n    val === \"*\" ||\n    val === \"/\"\n  );\n};\n\nexport const Button = (props) => (\n  <div\n    className={`button-wrapper ${\n      isOperator(props.children) ? null : \"operator\" // If not props.children return operator\n    }`}\n    onClick={() => props.handleClick(props.children)}\n  >\n    {props.children}\n  </div>\n);\n\n// () =>\n// is the same as writing function()\n","import React from \"react\";\nimport \"./Input.css\";\n\nexport const Input = (props) => (\n  <div style={{ overflow: \"hidden\" }} className=\"input\">\n    {props.input}\n  </div>\n);\n\n// () => function()\n","import React from \"react\";\nimport \"./ClearButton.css\";\n\nexport const ClearButton = (props) => (\n  <div className=\"clear-btn\" onClick={props.handleClear}>\n    {props.children}\n  </div>\n);\n\n// On click this will trigger the ClearButton class\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"./components/Button\";\nimport { Input } from \"./components/Input\";\nimport { ClearButton } from \"./components/ClearButton\";\nimport * as math from \"mathjs\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // Call super because we're extending the component class\n\n    this.state = {\n      // Gives the calculator the ability to accept numbers and operators.\n      input: \"\", // input value is initially an empty string\n      displayValue: \"0\",\n    };\n  }\n\n  addToInput = (val) => {\n    this.setState({ input: this.state.input + val }); // Method that allows you to change value of state.\n  };\n\n  calculatePercentage = () => {\n    const displayValue = this.state.input;\n    const currentValue = parseFloat(displayValue);\n\n    if (currentValue === 0) return;\n\n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, \"\");\n    const newValue = parseFloat(displayValue) / 100;\n\n    this.setState({\n      input: String(newValue.toFixed(fixedDigits.length + 2)),\n    });\n  };\n\n  // When we call = we will trigger this function that does math evaluation of current input\n  Calculate = () => {\n    try {\n      this.setState({\n        input:\n          (math.evaluate(\n            this.state.input\n              .replace(\"×\", \"*\")\n              .replace(\"÷\", \"/\")\n              .replace(\"√(\", \"sqrt(\")\n              .replace(\"∛(\", \"cbrt(\")\n              .replace(\"π\", \"3.141592653589793\")\n          ) || \"\") + \"\",\n      });\n    } catch (e) {\n      this.setState({\n        // catch (e) will catch any errors in the logic. Instead of crashing the app will return the message \"syntax ERROR\"\n        input: \"syntax ERROR\",\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <Input input={this.state.input}></Input>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.addToInput}>/</Button>\n            <Button handleClick={this.addToInput}>sin(</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.addToInput}>*</Button>\n            <Button handleClick={this.addToInput}>cos(</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.addToInput}>+</Button>\n            <Button handleClick={this.addToInput}>tan(</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>0</Button>\n            <Button handleClick={this.addToInput}>.</Button>\n            <Button handleClick={() => this.Calculate()}>=</Button>\n            <Button handleClick={this.addToInput}>-</Button>\n            <Button handleClick={this.addToInput}>log(</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>(</Button>\n            <Button handleClick={this.addToInput}>)</Button>\n            <Button handleClick={this.addToInput}>√(</Button>\n            <Button handleClick={this.addToInput}>∛(</Button>\n            <Button handleClick={this.addToInput}>^</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>abs(</Button>\n            <Button handleClick={this.addToInput}>e</Button>\n            <Button handleClick={this.addToInput}>π</Button>\n            <Button handleClick={this.addToInput}>!</Button>\n            <Button handleClick={this.calculatePercentage}>%</Button>\n          </div>\n\n          <div className=\"row\">\n            {/* input: \"\" - This sets the input back to an empty string or removes what we have entered. */}\n            <ClearButton\n              handleClear={() =>\n                // Will change the input state by deleting or clearing values or operator.\n                this.setState({\n                  input:\n                    this.state.input.slice(-2) === \"√(\"\n                      ? this.state.input.slice(0, -2)\n                      : this.state.input.slice(-8) === \"Infinity\"\n                      ? this.state.input.slice(0, -8)\n                      : this.state.input.slice(-3) === \"∛(\"\n                      ? this.state.input.slice(0, -3)\n                      : this.state.input.slice(-4) === \"sin(\" ||\n                        this.state.input.slice(-4) === \"cos(\" ||\n                        this.state.input.slice(-4) === \"tan(\" ||\n                        this.state.input.slice(-4) === \"log(\" ||\n                        this.state.input.slice(-4) === \"abs(\"\n                      ? this.state.input.slice(0, -4)\n                      : this.state.input.includes(\"syntax ERROR\") // If syntax ERROR, then \"DEL\" will set the state back to an empty string\n                      ? \"\"\n                      : this.state.input.slice(0, -1), // If just a normal operator or number, \"DEL\" will only remove the first element of string.\n                })\n              }\n            >\n              DEL\n            </ClearButton>\n            <ClearButton handleClear={() => this.setState({ input: \"\" })}>\n              AC\n            </ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// npm install mathjs - math.js can evaluate expressions\n// and supports chained operations.\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}